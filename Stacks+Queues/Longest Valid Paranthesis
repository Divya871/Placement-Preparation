class Solution {
public:
    int longestValidParentheses(string s) {
        stack<int>st;
        st.push(-1);
        int n=s.length();
        int len=0;
        for(int i=0;i<n;i++)
        {
            if(st.top()!=-1 && s[st.top()]=='(' && s[i]==')')
            {
                st.pop(); len=max(len,i-st.top());
            }
            else
             st.push(i);
        }
        return len;
    }
};


 int longestValidParentheses(string s) {
        int open=0,close=0,len=0;
        int n=s.length();
        for(int i=0;i<n;i++)
        {
            char ch=s[i];
            if(ch=='('){open++;}
            else if(ch==')'){close++;}
            
            if(open==close){len=max(len,2*close);}
            else if(close>open){open=0,close=0;}
        }
        
        open=0,close=0;
        for(int i=n-1;i>=0;i--)
        {
            char ch=s[i];
            if(ch=='('){open++;}
            else if(ch==')'){close++;}
            
            if(open==close){len=max(len,2*open);}
            else if(close<open){open=0,close=0;}
        }
        return len;
    }
